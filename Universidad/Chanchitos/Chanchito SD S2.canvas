{
	"nodes":[
		{"id":"804f434879eec1a2","type":"text","text":"# Sistemas Distribuidos Solemne 2","x":-851,"y":335,"width":380,"height":101},
		{"id":"6217cbddaa660f8b","type":"text","text":"#### Tipos de Sistemas de Nombrado","x":-1124,"y":1614,"width":390,"height":60},
		{"id":"bff8d73f59ddc206","type":"text","text":"##### Importancia del Nombrado\n- Identifica recursos (servicios, archivos, dispositivos)\n- Facilita la comunicación y compartición de recursos\n\n**Desafíos**\n- Escalabilidad en entornos distribuidos\n- Independencia de ubicación","x":-2243,"y":1644,"width":533,"height":278},
		{"id":"0bf84945dd881754","type":"text","text":"# Edge Architectures","x":-2906,"y":1365,"width":339,"height":80},
		{"id":"ed43e8872f9045a2","type":"text","text":"Arquitecturas híbridas muy usado actualmente\n**Problema** Internet no fue diseñado para usarse de forma masiva, la cantidad de tráfico es enorme\n\nEste define servicios en el borde de internet de forma que pueda proveer servicio de forma más directa sin necesidad de generar tráfico a través del ISP\n\n##### Capas de la Arquitectura\n- Cloud: Procesamiento centralizado, almacenamiento masivo, orquestación global.\n- Edge: Nodos cercanos al usuario (ISP/LAN), caching dinámico, preprocesamiento.\n- Fog/Device: Nodos cercanos al usuario (ISP/LAN), caching dinámico, preprocesamiento.\n\n##### Beneficios\n- Gana internet, menor tráfico\n- Gana el usuario, acceso más rápido\n- Gana ISP, este paga por el acceso al core del internet, por lo que menor tráfico, menor costo\n- Escalabilidad masiva: Miles de edge nodes gestionan carga localmente.\n\n##### Retos de Gestión\n- **Coherencia de datos:** Sincronizar réplicas entre bordes y nube\n- **Seguridad:** Ataques DDoS son más difíciles de mitigar en bordes distribuidos.\n- **Eficiencia energética:**\n    \n    - Dispositivos _Fog_ (STBs) consumen energía incluso inactivos (66% de su uso es en standby).\n        \n    - Soluciones: Modos de bajo consumo con conectividad (_80% de ahorro potencial_).\n\n","x":-3119,"y":1552,"width":764,"height":915},
		{"id":"fa63148444426f66","type":"text","text":"##### Criterios de Despliegue\nLos proveedores eligen ubicaciones para _edge servers_ basados en:\n\n*Demanda geográfica:* Zonas con alto tráfico de usuarios (ej: ciudades densas).\n*Infraestructura existente:* Colaboración con ISPs para instalar servidores en sus redes (ej: Akamai usa nodos en ISP locales).\n*Latencia requerida:* Aplicaciones críticas (videojuegos, telemedicina) necesitan bordes ultra-cercanos.\n*Coste-beneficio:* Balance entre cobertura y gasto operativo\n\n##### Mecanismos de Operación\n\nCaching inteligente: Almacena copias de contenido popular en edge servers (ej: series de Netflix).    \n- Usa algoritmos para predecir demanda (LRU, LFU).\n\nOrquestación centralizada: La nube decide qué replicar y dónde (ej: Netflix Open Connect actualiza catálogos nocturnos).\n\nProcesamiento descentralizado: Fog/Device ejecuta tareas simples (filtrado de datos IoT).   \n- Edge servers manejan tareas medias (transcodificación de video).\n\n##### Ejemplos\n*Akamai:* Utiliza edge servers para entregar contenido web de manera eficiente, reduciendo la latencia y mejorando la velocidad de acceso.\n*Nanodatacenters:* Emplea Set Top Boxes (STBs) controlados por ISP, aprovechando los recursos disponibles en una red de dispositivos confiables y seguros para crear una red de distribución de contenido eficiente. \n*CDN de Netflix*: Netflix usa su propia CDN llamada Open Connect, que coloca servidores en los ISP locales para almacenar y entregar contenido popular. Esto reduce significativamente la latencia y el ancho de banda requerido para transmitir videos, mejorando la calidad de servicio para los usuarios finales.","x":-3950,"y":1552,"width":760,"height":915},
		{"id":"b4626fff9d445604","type":"file","file":"Fotos/Chanchito SD/Pasted image 20250617202125.png","x":-3642,"y":1285,"width":629,"height":240},
		{"id":"b885a90b274fdc8d","type":"text","text":"###### Ejemplo\n1. Dos procesos, P0 y P2, quieren acceder al mismo recurso al mismo tiempo. Ambos envían solicitudes con sus timestamps.\n2. P0 tiene el timestamp más bajo, por lo que gana el acceso al recurso.\n3. Cuando P0 termina de usar el recurso, envía un OK a P2, permitiéndole acceder al recurso.","x":-3831,"y":909,"width":516,"height":280},
		{"id":"a110ad37e24ae902","type":"file","file":"Fotos/Chanchito SD/Pasted image 20250624223323.png","x":-3833,"y":337,"width":516,"height":180},
		{"id":"f5bb2883c296dfa2","type":"text","text":"Basado en el ordenamiento total de eventos utilizando relojes lógicos.\n- Proceso que desea un recurso envía un mensaje con el nombre del recurso, su número de proceso y el reloj lógico actual a todos los procesos.\n- Cada proceso receptor decide si concede el acceso basado en su estado actual y la comparación de marcas de tiempo.\n\n*Ventajas* Garantiza el acceso sin deadlocks\n**Problemas** Caída de nodos y la complejidad del manejo de mensajes multicast","x":-3833,"y":547,"width":518,"height":345},
		{"id":"893d5d10176e9b73","type":"text","text":"##### Algoritmo de Marcas de Tiempo (Ricart y Agrawala, 1981)\n\n","x":-3798,"y":242,"width":442,"height":79},
		{"id":"5b654f329a11a17b","type":"text","text":"###### Estructura del Anillo\nLos procesos se organizan en un anillo lógico, donde cada uno conoce la dirección de su vecino siguiente\n- Al iniciar el sistema, un primer proceso recibe el token, el cual circulará por el anillo\n###### Uso del Token\n- Solo el proceso que tiene el token puede acceder al recurso compartido\n- Una vez que el proceso termina de usar el recurso, debe pasar el token al siguiente proceso en el anillo.\n- Si un proceso recibe el token y no necesita usar el recurso, simplemente pasa el token al siguiente proceso\n\n*Ventajas*\n- *Prevención de Deadlocks* Dado que solo un proceso puede tener el token a la vez, se evita que múltiples procesos intenten acceder al recurso compartido simultáneamente\n- *Prevención de Inanición* Los procesos tienen garantizado eventualmente recibir el token y, por lo tanto, acceder al recurso compartido.\n\n**Problemas**\n- **Pérdida del Token** Si el proceso que tiene el token falla, el sistema necesita un mecanismo para detectar la pérdida del token y generar uno nuevo.\n- **Caída de Nodos** Si un nodo en el anillo falla, es necesario ajustar el anillo para saltar el nodo caído y continuar con la circulación del token.\n- **Detección de Pérdida del Token** Detectar la pérdida del token puede ser complicado, ya que el tiempo entre apariciones sucesivas del token no está determinado. La falta de recepción del token no necesariamente implica su pérdida.","x":-4498,"y":487,"width":620,"height":940},
		{"id":"8c2f644a426a91db","type":"file","file":"Fotos/Chanchito SD/Pasted image 20250624224928.png","x":-4405,"y":321,"width":435,"height":142},
		{"id":"1e5d9cd43bd69578","type":"text","text":"##### Algoritmo de Token Ring\n\n","x":-4338,"y":242,"width":300,"height":60},
		{"id":"cc7e3211c0ec9e78","type":"text","text":"Un proceso coordinador único maneja todas las solicitudes de acceso al recurso compartido. Si el recurso está libre, concede el acceso\n\n*Ventajas*\nSimplicidad y eficiencia, solo requiere 3 mensajes por recurso:\n- Request\n- Grant\n- Release\n\n**Problemas**\nPunto único de fallo y cuello de botella en sistemas grandes.\n","x":-2284,"y":217,"width":440,"height":403},
		{"id":"a92c9584166c0e43","type":"text","text":"### Algoritmos de Exclusión Mutua","x":-2183,"y":31,"width":238,"height":92},
		{"id":"a7ef7cfd77cf8802","type":"text","text":"#### Centralizados","x":-2440,"y":147,"width":238,"height":50},
		{"id":"6624cc5be38e8881","type":"text","text":"#### Descentralizados","x":-3209,"y":147,"width":238,"height":50},
		{"id":"22c1f24a53dba36a","type":"text","text":"###### Ejemplo\n1. El proceso P1 pide permiso al coordinador para acceder a un recurso compartido. El coordinador concede el permiso\n2. Mientras P1 está usando el recurso, el proceso P2 también pide permiso para acceder al mismo recurso. El coordinador no responde a P2 porque el recurso está ocupado.\n3. Cuando P1 libera el recurso, el coordinador responde a P2 y le concede el permiso para acceder al recurso.","x":-2829,"y":389,"width":474,"height":342},
		{"id":"078a970c7036508b","type":"file","file":"Fotos/Chanchito SD/Pasted image 20250624222013.png","x":-2863,"y":217,"width":542,"height":172},
		{"id":"1fe3e82848d8c277","type":"text","text":"### Exclusión Mutua","x":-2181,"y":-60,"width":234,"height":50},
		{"id":"4d043c8f74c238fa","type":"text","text":"Los procesos y la comunicación son esenciales para coordinar acciones y ordenar eventos. La sincronización está altamente relacionada ya que permite coordinar el acceso a recursos compartidos y manejar réplicas.","x":-2327,"y":-246,"width":531,"height":148},
		{"id":"40372e00a53fde12","type":"text","text":"# Exclusión y Elección Distribuida","x":-2321,"y":-340,"width":525,"height":74},
		{"id":"0ae9145ee6f8b175","type":"text","text":"Fundamental para garantizar que múltiples procesos no interfieran entre sí cuando acceden a recursos compartidos. Los algoritmos de exclusión mutua pueden ser de dos tipos: basados en tokens y basados en permisos.\n##### Requisitos\n1. *Seguridad*\nSolo un proceso puede acceder a la región crítica a la vez\n2. *Viveza*\nSe garantiza que un proceso que desea acceder al recurso lo hará en un momento dado, evitando la inanición\n3. *Orden*\nSe mantiene el orden causal de los eventos\n","x":-2886,"y":-340,"width":531,"height":406},
		{"id":"b5a47b6e12b8fa1f","type":"text","text":"## Métodos de Búsqueda","x":1040,"y":1373,"width":210,"height":80},
		{"id":"ed24d1849ce914a9","type":"text","text":"Nota: El orden da un poco igual, lo marco así por el orden de aparición en el PPT","x":1012,"y":1468,"width":390,"height":60},
		{"id":"1d54cc1fe3e2b3f5","type":"text","text":"##### Jerarquía\n*Super Peers* Nodos con mayor capacidad (procesamiento, ancho de banda, estabilidad)\n*Peers* Se conectan a un Super Peer, delegando búsquedas y comunicaciones\n\n##### Funciones\n- Indices Distribuidos: Almacenan metadatos de los recursos de sus peers asociados. \n- Optimización de búsquedas: Evitan el _flooding_ masivo en redes no estructuradas.\n- Gestión de conexiones: Limitan el número de enlaces por peer (ej: 5 conexiones en Gnutella).\n- Balance entre N búsquedas, tasa de resultados a costo de escalabilidad\n##### *Ventajas*\n- Escalabilidad al reducir trafico de red concentrando consultas\n- Eficiencia en busquedas frente a metodos como random walks\n- Estabilidad con alta disponibilidad\n##### **Desventajas**\n- Asignación SP -> Se crea asignaciones dinámicas\n- Cuello de botella\n- Puntos calientes\n- Eventualmente la escala es limitada. \n\tObligado a conectar un SP, rendimiento depende de la cantidad de SP que tenga. Si no tengo un mínimo de pares, no funciona","x":1455,"y":2329,"width":764,"height":754},
		{"id":"34a3b162561f95e1","type":"text","text":"*¿Es Beneficioso conectarse al mismo SP?*\n\tNo siempre. Anonimato\n\tEstrategias para asignación dinámica a SP\n\n*¿Qué nodos son candidatos a SP?*\n\tSe tiene que capturar el comportamiento de los peers para detectar candidatos. Costoso\n\n\n*¿Cómo los elegimos?*\n\tAlgoritmos de elección: Buenas caracteristicas de ancho de banda, estabilidad, recursos.","x":2312,"y":2329,"width":580,"height":314},
		{"id":"ee616565e7c371e2","type":"text","text":"## Super-Peers\nSolución Escalable","x":1040,"y":2363,"width":209,"height":100},
		{"id":"4c0bf2427e1e630c","type":"file","file":"Fotos/Chanchito SD/Pasted image 20250617193914.png","x":965,"y":2488,"width":400,"height":255},
		{"id":"d2b23f615eb3135e","type":"file","file":"Fotos/Chanchito SD/Pasted image 20250617193957.png","x":1029,"y":2743,"width":261,"height":255,"color":"#282a36"},
		{"id":"591e14b87dc5e5f1","type":"text","text":"##### Local Indexes\nReferencias locales de dónde están los recursos\n- Qué archivos tienen mis vecinos\n###### Desventajas\n- Poco usado\n- Mantener la lista de indices caro dado el dinamismo de peers y datos","x":1492,"y":1453,"width":560,"height":310},
		{"id":"4c30e8ad1da63db9","type":"text","text":"##### Random Walks\n\nSelecciono un vecino al azar\n- Mucho mas recatado en mensajes, menos agresivo\n\n*!!* Si estoy en un vecindario con alta diversidad de recursos\n- Menor probabilidad de encontrar recursos\n- Aumenta latencia esperando respuestas","x":2112,"y":1453,"width":540,"height":310},
		{"id":"f35ac76c7cd048b0","type":"text","text":"##### K-Random Walks\nEn vez de elegir un solo peer al azar, elijo N peers paralelamente\n- Disminuye latencia\n*Variantes:* \n1. APS Adaptative Probabilistic Search\n2. Id-based, envía solo al que no ha ruteado la consulta  \n3. Two-Level Random Walk, K1 random walkers por un TTL T1, luego K2 random walkers por TTL 74","x":2692,"y":1453,"width":580,"height":310},
		{"id":"ec905edc8e07756f","type":"text","text":"### ¿Cómo me conecto?\nParticipante es llamado Bootstrap node\n###### ¿Cómo lo localizo?\n- Listas preexistentes\n- Boostrap cache\n###### ¿Problema?\nLimita conexiones para balancear la carga (Versión 0,.4 Gnutella 5 conexiones)","x":2097,"y":1848,"width":430,"height":370},
		{"id":"379a8abbfc562ac0","type":"text","text":"### Preguntas clave","x":1515,"y":1858,"width":250,"height":60},
		{"id":"0cc9f0f3beb6db04","type":"text","text":"### TTL\nDifícil setear el parámetro TTL: Red dinamica no ayuda\n###### Chequeo resultados\nSe chequea con el nodo que consulta frecuentemente\n- Normalmente cada 4 saltos","x":1525,"y":1953,"width":480,"height":265},
		{"id":"02972f046cbe34e4","type":"text","text":"##### Flooding\n\nInundo de mensaje a todos los Peers conocidos\n- ( - ) Poco eficiente\n- Calidad resultados VS # mensajes\n- Problemas de escalabilidad\n\n","x":1492,"y":1003,"width":460,"height":340},
		{"id":"baee444e457db2d7","type":"text","text":"##### *BFS* Breath First Search\n\nFlooding controlado\n- Sistema de control basado en TTL o routing hoops\n- Si no hay resultados, hace *forward*\n###### Desventajas\n- Mensajes duplicados, gran overhead\n- El proceso se repite TTL veces","x":2112,"y":1003,"width":540,"height":340},
		{"id":"e2f741df8408169b","type":"text","text":"##### Iterative Deepending\nHace BFS secuenciales \n1. Comienza con busquedas poco profundas\n2. De no encontrar el recurso, itera y prueba a mayor produndidad\n\nSe puede optimizar:\n1. Nodos en el camino de profundidad P1 almacenan por un tiempo en cache la pregunta\n 2. Si no encuentra, se reenvía a profundidad P2-P1\n Guardar por un tiempo la consulta evita mensajes repetidos","x":2692,"y":1003,"width":580,"height":340},
		{"id":"56dbc7fd89430d32","type":"file","file":"Fotos/Chanchito SD/Pasted image 20250617193347.png","x":374,"y":1961,"width":400,"height":368},
		{"id":"f2f37759868e1e32","type":"text","text":"# P2P No Estructuradas","x":393,"y":1838,"width":361,"height":80},
		{"id":"b6965641d607d79b","type":"text","text":"Las arquitecturas no estructuradas utilizan flooding controlado para buscar de manera de balancear calidad vs mensajes. Estos mecanismos son incompletos y son mas efectivos en busquedas de recursos populares","x":374,"y":1498,"width":400,"height":178},
		{"id":"efcaeb0e2d6f63b8","type":"text","text":"##### Algoritmo de Berkeley (1989)\nPensado para entornos sin acceso a UTC. Un coordinador consulta periódicamente a las máquinas y ajusta sus relojes basándose en un promedio tolerante a fallos.\n\n**Problema**\nEl mismo problema de la latencia de red y el dinamismo de Internet afecta la precisión de la sincronización\n\n*Distribuido*\nEl proceso es más robusto dado que no depende de un único servidor de tiempo ","x":1266,"y":-9,"width":461,"height":434},
		{"id":"ccdcb3e1b1cf36c1","type":"text","text":"##### Network Time Protocol (NTP)\nDiseñado para sincronizar relojes a través de Internet. Utiliza técnicas estadísticas para filtrar los tiempos de calidad y el algoritmo de Marzullo para seleccionar fuentes de tiempo\n\n*Jerarquía de Servidores (Strata):*\nLa red de servidores está organizada en una estructura jerárquica conocida como strata.\n\n- Stratum 0: Relojes de referencia, como relojes atómicos, GPS, y otros dispositivos de alta precisión. No están conectados directamente a la red\n- Stratum 1: Servidores conectados directamente a dispositivos de Stratum 0. Actúan como servidores de tiempo primarios y proporcionan la hora a los servidores Stratum 2\n- Stratum 2: Servidores que se sincronizan con Stratum 1 y proporcionan la hora a servidores Stratum 3 y así sucesivamente.","x":1766,"y":-9,"width":440,"height":594},
		{"id":"f6d339587e5896e9","type":"text","text":"###### Ejemplo\n*Escenario*\nUn servidor en Stratum 2 recibe la hora de varios servidores Stratum 1. Este servidor Stratum 2 puede ser utilizado por una organización para sincronizar todos sus equipos y servidores internos.\n\nProceso de sincronización: \n1. El servidor Stratum 2 consulta múltiples servidores Stratum 1 para obtener la hora. \n2. Utiliza técnicas estadísticas para filtrar y seleccionar la hora más precisa y confiable. \n3. Proporciona esta hora a los servidores y dispositivos de nivel inferior (Stratum 3, 4, etc.). \n\n4. Beneficio: Este enfoque jerárquico permite que NTP escale eficientemente a grandes redes, proporcionando una sincronización de tiempo precisa y confiable a través de múltiples niveles de la jerarquía.","x":2246,"y":-9,"width":420,"height":594},
		{"id":"c19dd94fbd225f76","type":"text","text":"##### Definición de Tiempo\n\n*Tiempo* magnitud escalar que mide el intervalo entre dos sucesos\n*Problemas en sistemas centralizados* El tiempo puede ser ambiguo cuando procesos diferentes obtienen valores de tiempo en momentos cercanos\n\n##### Relojes Físicos\n\n- *Funcionamiento* Utilizan un cristal de cuarzo y dos registros (contador y almacenador). Cada oscilación decrementa el contador y al llegar a cero se genera una interrupción\n- *Desajuste* A pesar de la estabilidad del cuarzo, los relojes de diferentes máquinas pueden desincronizarse debido a variaciones en la frecuencia. La latencia en la red también es una restricción significativa para la sincronización\n- *Deriva del reloj* La diferencia en el tiempo entre los relojes de diferentes máquinas se conoce como **clock skew*\n- *UTC uy relojes atómicos* Se utiliza el Tiempo Universal Coordinado (UTC) basado en relojes atómicos para una medición precisa del tiempo.\n\n","x":765,"y":481,"width":660,"height":530},
		{"id":"9b4f78e664ed7503","type":"text","text":"Esencial en sistemas distribuidos para coordinar acciones y ordenar eventos entre múltiples procesos que pueden estar ubicados en diferentes máquinas.\n\nEste proceso es crítico para el manejo de réplicas, acceso a recursos compartidos y consistencia de datos.\n\n##### Importancia de sincronización\n\n- *Orden de eventos*\nCrucial para que varios procesos decidan el orden de los eventos, especialmente en el manejo de réplicas. EJ) para evitar la inanición, el proceso que manifiesta primero su interés debe ser atendido primero.\n![[Pasted image 20250624194947.png]]\n- *Acceso a recursos compartidos*\nPara evitar conflictos, como el uso de una impresora compartida\n- *Consistencia de datos*\nLa consistencia estricta implica que todas las réplicas tengan la misma información en todo momento. Una consistencia más relajada permite que, después de un intervalo de tiempo, las réplicas se sincronicen.\n","x":-13,"y":-9,"width":746,"height":740},
		{"id":"935e1b6c48561546","type":"text","text":"# Sincronización","x":216,"y":-115,"width":289,"height":80},
		{"id":"bff629d474ad2e43","type":"text","text":"### Algoritmos de Sincronización\n\n","x":765,"y":-110,"width":381,"height":70},
		{"id":"b90a47715a6ca350","type":"text","text":"##### Algoritmo de Cristian (1989)\nDiseñado para entornos con un servidor de tiempo sincronizado con UTC. Las máquinas consultan periódicamente al servidor de tiempo para ajustar sus relojes\n\n**Problema**\nLa latencia en la red puede afectar la precisión de la sincronización. Este modelo es más aplicable para redes pequeñas (LAN) dada la menor variabilidad de latencia\n\n*Centralizado*\nDependencia de un único servidor de tiempo, lo que crea un punto único de fallo","x":765,"y":-9,"width":461,"height":434},
		{"id":"0620a9b4c73dd904","type":"text","text":"Lamport (1978): Lo importante es el orden de los eventos, no el tiempo absoluto","x":906,"y":-953,"width":277,"height":89},
		{"id":"beac149526635cf3","type":"text","text":"### Relojes Vectoriales","x":1395,"y":-908,"width":250,"height":60},
		{"id":"1f0b3956206e44d7","type":"text","text":"Cada proceso mantiene un vector con contadores de eventos para todos los procesos involucrados\n**Causalidad**\nGarantizan una relación de causalidad entre eventos si y solo si el vector de un evento es menor que el vector del otro","x":1395,"y":-805,"width":564,"height":160},
		{"id":"9b2ca0f757f4c844","type":"file","file":"Fotos/Chanchito SD/Pasted image 20250624220623.png","x":1395,"y":-559,"width":564,"height":260},
		{"id":"b7dc25cb7e5766fe","type":"text","text":"# Relojes lógicos","x":221,"y":-1059,"width":280,"height":80},
		{"id":"5e3e53764dd40e2a","type":"text","text":"*Relojes de Lamport*\nAsignan un valor de tiempo a los eventos para mantener un orden consistente. Cuando un sistema A quiere interactuar con B (A→B), el evento de emisión en A ocurre en el tiempo t y el evento de recepción en B ocurre en el tiempo t' (t' > t). Esto asegura que el evento de emisión precede al evento de recepción (a ~ b).\n\n*Totally Ordered Multicast*\nUtiliza relojes lógicos para asegurar que todos los mensajes sean entregados en el mismo orden a todos los procesos.\n\n*Concurrent Events*\nLos eventos que ocurren en el mismo proceso tienen una secuencia definida, pero para eventos en sistemas remotos, no siempre es posible determinar su orden. Por ejemplo, un evento a' en el sistema A puede ser concurrente con un evento a en el sistema B (a' || a).\n\n*Incremento de Tiempo*\nLos relojes lógicos se incrementan de 1 en 1, pero no es estrictamente necesario. Si el evento a en A tiene t=7 y el evento b en B tiene t=5, y sabemos que a precede b, ajustamos el reloj de B a t=8 (7+1) para mantener la consistencia de la secuencia de eventos.\n\n*Middleware*\nSe encarga de ajustar el reloj lógico para mantener la consistencia en la secuencia de eventos en el sistema distribuido.\n\n*Piggybacking*\nPiggybacking se refiere a la práctica de adjuntar la información del reloj lógico del emisor al mensaje que se envía. Esto permite que el receptor del mensaje actualice su propio reloj lógico basado en la información recibida. Es una técnica eficiente para sincronizar los relojes lógicos en un sistema distribuido sin la necesidad de mensajes adicionales","x":1,"y":-953,"width":721,"height":788},
		{"id":"1e1b966a16626db8","type":"file","file":"Fotos/Chanchito SD/Pasted image 20250624215934.png","x":742,"y":-805,"width":605,"height":160},
		{"id":"7640dabc137604d9","type":"file","file":"Fotos/Chanchito SD/Pasted image 20250624220245.png","x":742,"y":-585,"width":605,"height":319},
		{"id":"c3130a101936cdc7","type":"text","text":"Extiende el algoritmo centralizado utilizando múltiples coordinadores. Se requiere una mayoría de votos para acceder al recurso.\n*Ventajas*\nElimina el cuello de botella y único punto de fallo\n**Problemas**\nLa caída de coordinadores y la complejidad del manejo de votos\n","x":-3280,"y":217,"width":381,"height":283},
		{"id":"5be37e579a365015","type":"text","text":"#### Distribuidos","x":-3970,"y":147,"width":238,"height":50},
		{"id":"09afe95d935c8d3c","type":"file","file":"Fotos/Chanchito SD/Pasted image 20250624225335.png","x":-4984,"y":242,"width":400,"height":186},
		{"id":"9caf93e4f77f2432","type":"text","text":"#### Basado en Tokens","x":-4909,"y":147,"width":250,"height":50},
		{"id":"ad763b85389e6afc","type":"text","text":"Un único token circula entre los procesos, el proceso que tiene el token puede acceder al recurso compartido.\n*Ventajas*\nPreviene inanición y deadlocks.\n**Problemas**\nPérdida del token y caída de nodos requieren complejos mecanismos de recuperación.\n\n*Detallitos*\n- Debe haber un overlay para la lógica de pasar el token.\n- Se debe definir un tiempo de servicio (Ts), que es el tiempo máximo que un proceso puede retener el token para evitar inanición.\n- La generación del token debe estar controlada para evitar la creación de múltiples tokens.","x":-5020,"y":463,"width":472,"height":494},
		{"id":"0c7b25934daa11ec","type":"text","text":"##### Conceptos Clave\n\n*Identificador* Único, inmutable, referencia exacta a una entidad (ej. hash SHA-1)\n*Nombre* Legible, no necesariamente único, idependiente de dirección física (ej. www.udp,.cl)\n*URI (Uniform Resourse Identifier)*\n- URL: Ubica recursos (http://www.udp.cl)\n- URN: Nombra recursos persistentes (urn:isbn:0451450523)\n","x":-2243,"y":1976,"width":533,"height":320},
		{"id":"6d36dccd15ec35cd","type":"text","text":"##### Casos de Estudio\n\n| Sistema | Tipo            | Mecanismo                               | Ejemplo                     |\n| ------- | --------------- | --------------------------------------- | --------------------------- |\n| Chord   | Flat (DHT)      | Anillo lógico con finger tables         | Resolución de claves en P2P |\n| DNS     | Structured      | Jerarquías de dominios                  | Conversión www.udp.cl a IP  |\n| LDAP    | Attribute-Based | Directorios con búsquedas por atributos | Autenticación empresarial   |\n\n","x":-2243,"y":2329,"width":533,"height":353},
		{"id":"09c4ce4d498188b0","type":"text","text":"##### Problemas y Soluciones\n- **Movilidad de recursos**:\n    - Solución: _Home-Based_ + actualizaciones dinámicas (ej: Mobile IP).\n        \n- **Escalabilidad**:\n    - Solución: Distribución jerárquica (DNS) o descentralizada (DHTs).\n        \n- **Eficiencia en búsquedas**:\n    - Solución: **Caché** (ej: DNS guarda respuestas recientes).\n","x":-2243,"y":2743,"width":533,"height":318},
		{"id":"8697bf16389fc8fa","type":"file","file":"Fotos/Chanchito SD/Pasted image 20250617220513.png","x":-2197,"y":3220,"width":442,"height":414},
		{"id":"aaee47a2881be77b","type":"text","text":"#### DHTs","x":-2038,"y":3147,"width":124,"height":50},
		{"id":"1f8ed82ee6c8efc8","type":"text","text":"##### Flat Naming\nNombres planos sin estructura (ej. identificadores aleatorios)\n\n| Técnica               | Mecanismo                                   | Limitaciones                                                   |\n| --------------------- | ------------------------------------------- | -------------------------------------------------------------- |\n| *Broadcast*           | Consulta a todos los nodos en la red        | Solo redes locales (no escala)                                 |\n| *Forwarding pointers* | Cadenas de referencias a nuevas ubicaciones | Latencia alta, frágil ante fallos                              |\n| *Home-Based*          | \"Home\" almacena ubicación actual            | Sobrecarga si la entidad se mueve                              |\n| *DHTs*                | Tablas de hash distribuidas                 | Búsquedas exactas, alta latencia (solución: Proximity Routing) |\n\n\n\n\n","x":-1631,"y":1749,"width":727,"height":387},
		{"id":"3d9cf6140f7f2ef8","type":"text","text":"##### Attribute-Based Naming\nBúsqueda por atributos (ej: \"impresora color en piso 3\").\n- En muchos casos es más conveniente nombrar y buscar las  \nentidades por sus atributos (Yellow pages)\n- Servicio de directorio tradicionales\n\n**Problema** Costoso, Búsquedas complejas y costosas requieren bases de datos optimizadas\n\n*Solución* Implementar un servicio de directorio como una base de datos\n\n","x":-843,"y":1750,"width":620,"height":386},
		{"id":"6a022736fce31827","type":"text","text":"##### Structured Naming - DNS\nNombres jerárquicos (ej. rutas de archivos, DNS). \nJerarquía:\n\n![[Pasted image 20250617211818.png]]\n\n*Componentes:*\n- Global level: directorios de alto nivel manejados por varias  \nadministraciones  \n- Administrational level: directorios de nivel intermedio  \n- Managerial level: directorios de bajo nivel manejados por una  \nadministración (local DNS)\n\n*Optimizaciones Clave en DNS*\n1. **Caché**:\n    - Servidores y clientes almacenan respuestas recientes (TTL controla validez).\n    - Reduce tráfico: ~70% de consultas se resuelven desde caché.\n2. **Réplicas**:\n    - Múltiples servidores para TLD y dominios (ej: 13 root servers globales con espejos).\n3. **Balance de Carga**:\n    \n    - Un mismo nombre puede mapear a varias IPs (_ej: google.com_).","x":-1631,"y":2205,"width":727,"height":954},
		{"id":"270f984fc0e983ff","type":"file","file":"Fotos/Chanchito SD/Pasted image 20250617220020.png","x":-1631,"y":3159,"width":727,"height":472},
		{"id":"3fe53823c3b7f983","type":"text","text":"###### DNS y su Función\n\n| Componente DNS             | Función                                                                               | Analogía (Biblioteca)                                                               |\n| -------------------------- | ------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------- |\n| *DNS Resolver*             | Recibe consultas de clientes (navegadores) y gestiona la búsqueda completa.           | _Bibliotecario_ que recibe tu pregunta y busca el libro en los índices y estantes   |\n| *Root Nameserver*          | Primer paso: dirige la consulta al TLD correcto (ej: `.com`, `.cl`).                  | _Índice general_ que te dice en qué sección de la biblioteca buscar (ej: \"Ciencia\") |\n| *TLD Nameserver*           | Proporciona la dirección del servidor autoritativo para el dominio (ej: `udp.cl`).    | _Estante específico_ (ej: \"Libros de Informática\") donde buscar el libro            |\n| *Authoritative Nameserver* | Resuelve la consulta final, devolviendo la IP del host solicitado (ej: `www.udp.cl`). | _Diccionario_ en el estante que contiene la página exacta del libro que necesitas   |\n\n\n\n\n","x":-1631,"y":3634,"width":727,"height":460},
		{"id":"7c2c8ef27fddc763","type":"text","text":"\n### Resumen\n- **Flat naming**: Ideal para sistemas descentralizados masivos (P2P).\n    \n- **Structured naming**: Esencial para usabilidad humana (DNS, rutas de archivos).\n    \n- **Attribute-based**: Potente para servicios empresariales (LDAP).\n    \n- **Tendencia**: Sistemas híbridos que combinan escalabilidad (DHTs) y legibilidad (DNS).","x":-843,"y":2205,"width":744,"height":186},
		{"id":"6cdfd8719a4ecb97","type":"text","text":"###### *Tipos de Queries*\n- Recursiva: El servidor resuelve toda la cadena (costo alto para el servidor).    \n- Iterativa: El cliente gestiona múltiples consultas (costo distribuido).\n- No recursiva: Usa caché para respuestas rápidas.\n\n| Tipo         | Mecanismo                                                                                                                                                                                                                                              | Ventajas                                                                               |\n| ------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | -------------------------------------------------------------------------------------- |\n| Recursiva    | El servidor DNS asume toda la resolución:  <br>1. Cliente → Resolver  <br>2. Resolver gestiona consultas a root/TLD/authoritative  <br>3. Devuelve IP o error al cliente.                                                                              | Cliente no necesita lógica compleja.  <br>✅ Útil para clientes simples.                |\n| Iterativa    | El servidor responde con \"la mejor respuesta conocida\":  <br>1. Cliente pregunta a root  <br>2. Root devuelve referencia a TLD  <br>3. Cliente pregunta a TLD  <br>4. TLD devuelve referencia a authoritative  <br>5. Cliente repite hasta obtener IP. | Distribuye carga entre servidores.  <br>✅ Menor sobrecarga para servidores superiores. |\n| No Recursiva | Solo se usa si el servidor tiene la respuesta en caché:  <br>1. Si es authoritative o tiene registro en caché → responde directamente.  <br>2. Si no, devuelve error o referencia.                                                                     | Respuestas ultra-rápidas (caché).  <br>✅ Ideal para reducir tráfico.                   |\n","x":-760,"y":2424,"width":979,"height":574},
		{"id":"1d0ef0751056b62a","type":"file","file":"Fotos/Chanchito SD/Pasted image 20250617215734.png","x":-637,"y":2998,"width":733,"height":381},
		{"id":"9bfa3cac7db582df","type":"text","text":"Cuando un proceso detecta que el coordinador no responde, inicia una elección enviando un mensaje a todos los procesos con un ID mayor.\n\n###### Proceso\n- Si no recibe respuesta, el proceso que inició la elección se convierte en el nuevo coordinador\n- Si recibe respuesta, el proceso que respondió inicia su propia elección.\n\n*Ventajas* Simple y eficiente para detectar caídas\n**Desventajas** Consume más mensajes y ancho de banda en sistemas grandes.\n","x":-2440,"y":-880,"width":414,"height":430},
		{"id":"ddb1d38dc409446b","type":"text","text":"### Algoritmo Bully (Garcia-Molina, 1982)","x":-2440,"y":-980,"width":414,"height":75},
		{"id":"8d326e24a99ba20e","type":"file","file":"Fotos/Chanchito SD/Pasted image 20250624230833.png","x":-2920,"y":-980,"width":451,"height":530},
		{"id":"12230fdad2a01241","type":"text","text":"Los procesos están ordenados en un anillo lógico. Cuando un coordinador falla, el proceso siguiente inicia una elección enviando un mensaje alrededor del anillo.\n\n###### Proceso\n- Cada proceso añade su número de proceso al mensaje.\n- Cuando el mensaje vuelve al iniciador, este selecciona al proceso con el número mayor como nuevo coordinador y notifica al resto.\n\n*Ventajas* Evita el problema de inanición.\n**Desventajas** Complejidad en la gestión de la lista de procesos y en la detección de fallos.","x":-3420,"y":-905,"width":414,"height":455},
		{"id":"d6fca30288512000","type":"text","text":"### Algoritmo de Anillo","x":-3353,"y":-980,"width":280,"height":50},
		{"id":"1abcf7d4c99c4a4d","type":"text","text":"# Algoritmos de Elección","x":-1996,"y":-1095,"width":394,"height":80},
		{"id":"3a1de7023fdb5bab","type":"text","text":"En muchos algoritmos distribuidos, es necesario que un proceso actúe como coordinador. Los algoritmos de elección permiten elegir un coordinador cuando el actual falla.","x":-1993,"y":-980,"width":394,"height":165},
		{"id":"f7497d5d1a69bb67","type":"file","file":"Fotos/Chanchito SD/Pasted image 20250624231205.png","x":-3606,"y":-450,"width":600,"height":268},
		{"id":"c61b04a74b81653f","type":"file","file":"Fotos/Chanchito SD/Pasted image 20250624231449.png","x":-4454,"y":-430,"width":748,"height":422},
		{"id":"0b8361e8adc03116","type":"text","text":"Su objetivo es seleccionar un único líder entre todos los procesos de la red\n\n- Algoritmo de elección de líder distribuida diseñado para anillos *bidireccionales*.\n- Cada proceso tiene un ID único de la lista de procesos y en la detección de fallos.\n\n*Ventajas* \n- *Eficiencia de Mensajes* Mejor que algunos algoritmos más simples O(N log N) en el peor de los casos)\n- *Distribución* No requiere un coordinador central, es puramente distribuido.\n- *Tolerancia a Fallos (parcial)*  Si un proceso falla y se vuelve pasivo, el algoritmo puede seguir funcionando, siempre y cuando el líder eventual no falle antes de ser elegido\n\n**Desventajas**\n\n- Sincronización: Requiere que los procesos operen en rondas síncronas\n- Conocimiento del ID: Requiere que cada proceso tenga un ID único\n- Fallos: Es susceptible a fallos en los mensajes o en los procesos activos durante la elección (múltiples líderes)","x":-4454,"y":-905,"width":748,"height":480},
		{"id":"f7e956975e57090d","type":"text","text":"### Algoritmo Franklin","x":-3966,"y":-980,"width":260,"height":50},
		{"id":"6a1e6cc72ff0d08a","type":"text","text":"# Naming","x":-1374,"y":1373,"width":213,"height":80}
	],
	"edges":[
		{"id":"fa1e970e6904a6e0","fromNode":"b5a47b6e12b8fa1f","fromSide":"right","toNode":"02972f046cbe34e4","toSide":"left"},
		{"id":"7aa18b6f9b1475bf","fromNode":"02972f046cbe34e4","fromSide":"right","toNode":"baee444e457db2d7","toSide":"left"},
		{"id":"1c1fdffd19cfaab6","fromNode":"baee444e457db2d7","fromSide":"right","toNode":"e2f741df8408169b","toSide":"left"},
		{"id":"c205315dd07ef30e","fromNode":"e2f741df8408169b","fromSide":"bottom","toNode":"591e14b87dc5e5f1","toSide":"top"},
		{"id":"e146757cc0118be9","fromNode":"591e14b87dc5e5f1","fromSide":"right","toNode":"4c30e8ad1da63db9","toSide":"left"},
		{"id":"08ca76e88c984992","fromNode":"4c30e8ad1da63db9","fromSide":"right","toNode":"f35ac76c7cd048b0","toSide":"left"},
		{"id":"e71dd4f88e073ac1","fromNode":"f2f37759868e1e32","fromSide":"right","toNode":"b5a47b6e12b8fa1f","toSide":"left"},
		{"id":"9edb3610fd7d1d84","fromNode":"f2f37759868e1e32","fromSide":"right","toNode":"ee616565e7c371e2","toSide":"left"},
		{"id":"95d6b11d11359e4c","fromNode":"0cc9f0f3beb6db04","fromSide":"right","toNode":"ec905edc8e07756f","toSide":"left"},
		{"id":"14360e8c963eb319","fromNode":"b5a47b6e12b8fa1f","fromSide":"bottom","toNode":"379a8abbfc562ac0","toSide":"left"},
		{"id":"5aa1156083caf6d1","fromNode":"ee616565e7c371e2","fromSide":"right","toNode":"1d54cc1fe3e2b3f5","toSide":"left"},
		{"id":"9e30fd6342f01eb8","fromNode":"1d54cc1fe3e2b3f5","fromSide":"right","toNode":"34a3b162561f95e1","toSide":"bottom"},
		{"id":"bea68f7fc9afbe56","fromNode":"6a1e6cc72ff0d08a","fromSide":"bottom","toNode":"bff8d73f59ddc206","toSide":"top"},
		{"id":"3d98d7ede9c3fa16","fromNode":"bff8d73f59ddc206","fromSide":"bottom","toNode":"0c7b25934daa11ec","toSide":"top"},
		{"id":"fb2bf4f988fb5970","fromNode":"6a1e6cc72ff0d08a","fromSide":"bottom","toNode":"6217cbddaa660f8b","toSide":"top"},
		{"id":"3789d1e0443de7de","fromNode":"6217cbddaa660f8b","fromSide":"bottom","toNode":"1f8ed82ee6c8efc8","toSide":"top"},
		{"id":"e4fdf9b2ca18eeb5","fromNode":"6217cbddaa660f8b","fromSide":"bottom","toNode":"3d9cf6140f7f2ef8","toSide":"top"},
		{"id":"adb1bb7abaaf21a4","fromNode":"0c7b25934daa11ec","fromSide":"bottom","toNode":"6d36dccd15ec35cd","toSide":"top"},
		{"id":"9d7b17659e9f0d1a","fromNode":"6217cbddaa660f8b","fromSide":"bottom","toNode":"6a022736fce31827","toSide":"top"},
		{"id":"1a0caf5114ab0bbe","fromNode":"804f434879eec1a2","fromSide":"bottom","toNode":"6a1e6cc72ff0d08a","toSide":"top"},
		{"id":"bca555ca39629af4","fromNode":"804f434879eec1a2","fromSide":"bottom","toNode":"f2f37759868e1e32","toSide":"top"},
		{"id":"79f7355ea68d6ead","fromNode":"ed43e8872f9045a2","fromSide":"left","toNode":"fa63148444426f66","toSide":"right"},
		{"id":"b5bbb46b8a0f50c2","fromNode":"6a022736fce31827","fromSide":"right","toNode":"6cdfd8719a4ecb97","toSide":"left"},
		{"id":"9d7cb26ffd4a30b7","fromNode":"1f8ed82ee6c8efc8","fromSide":"left","toNode":"aaee47a2881be77b","toSide":"top"},
		{"id":"63daa4b1ab503c5c","fromNode":"270f984fc0e983ff","fromSide":"left","toNode":"3fe53823c3b7f983","toSide":"left"},
		{"id":"932dba14874beea6","fromNode":"804f434879eec1a2","fromSide":"top","toNode":"935e1b6c48561546","toSide":"left"},
		{"id":"b784acde81f1889d","fromNode":"9b4f78e664ed7503","fromSide":"bottom","toNode":"c19dd94fbd225f76","toSide":"left"},
		{"id":"e0f76bb1b483ede1","fromNode":"bff629d474ad2e43","fromSide":"bottom","toNode":"b90a47715a6ca350","toSide":"top"},
		{"id":"dbdcae2a8b6614ff","fromNode":"bff629d474ad2e43","fromSide":"right","toNode":"efcaeb0e2d6f63b8","toSide":"top"},
		{"id":"d189ea98b60d11e3","fromNode":"bff629d474ad2e43","fromSide":"right","toNode":"ccdcb3e1b1cf36c1","toSide":"top"},
		{"id":"c0b6d6c938c1eba8","fromNode":"ccdcb3e1b1cf36c1","fromSide":"bottom","toNode":"f6d339587e5896e9","toSide":"bottom"},
		{"id":"0e003f52427f573f","fromNode":"b7dc25cb7e5766fe","fromSide":"right","toNode":"beac149526635cf3","toSide":"top"},
		{"id":"784ca8e251b6b142","fromNode":"1f0b3956206e44d7","fromSide":"bottom","toNode":"9b2ca0f757f4c844","toSide":"top"},
		{"id":"e603305cfdb31d38","fromNode":"804f434879eec1a2","fromSide":"top","toNode":"b7dc25cb7e5766fe","toSide":"left"},
		{"id":"258f42a677c362fe","fromNode":"40372e00a53fde12","fromSide":"bottom","toNode":"1fe3e82848d8c277","toSide":"top"},
		{"id":"88dc4c9e99cf2fc5","fromNode":"804f434879eec1a2","fromSide":"top","toNode":"40372e00a53fde12","toSide":"right"},
		{"id":"80420acf8b55fc99","fromNode":"a92c9584166c0e43","fromSide":"bottom","toNode":"a7ef7cfd77cf8802","toSide":"right"},
		{"id":"da783f50396c8821","fromNode":"a92c9584166c0e43","fromSide":"left","toNode":"6624cc5be38e8881","toSide":"top"},
		{"id":"ab4460ed57db51ac","fromNode":"5be37e579a365015","fromSide":"bottom","toNode":"f5bb2883c296dfa2","toSide":"top"},
		{"id":"03145da10dbac3df","fromNode":"5be37e579a365015","fromSide":"bottom","toNode":"1e5d9cd43bd69578","toSide":"top"},
		{"id":"2f672768a45e42c8","fromNode":"1e5d9cd43bd69578","fromSide":"bottom","toNode":"5b654f329a11a17b","toSide":"top"},
		{"id":"4642c34722a8180d","fromNode":"9caf93e4f77f2432","fromSide":"bottom","toNode":"ad763b85389e6afc","toSide":"top"},
		{"id":"9749f1363554ab5d","fromNode":"0bf84945dd881754","fromSide":"bottom","toNode":"ed43e8872f9045a2","toSide":"top"},
		{"id":"1235a7c3a6048528","fromNode":"a92c9584166c0e43","fromSide":"left","toNode":"5be37e579a365015","toSide":"top"},
		{"id":"dd459e51b2953a78","fromNode":"a92c9584166c0e43","fromSide":"left","toNode":"9caf93e4f77f2432","toSide":"top"},
		{"id":"26b38ef46a7596a0","fromNode":"1fe3e82848d8c277","fromSide":"bottom","toNode":"a92c9584166c0e43","toSide":"top"},
		{"id":"9b9ca9b6a3608c14","fromNode":"804f434879eec1a2","fromSide":"bottom","toNode":"0bf84945dd881754","toSide":"right"},
		{"id":"034d8b32b0e58f93","fromNode":"1abcf7d4c99c4a4d","fromSide":"left","toNode":"ddb1d38dc409446b","toSide":"top"},
		{"id":"fa08408cf4f7e1ca","fromNode":"1abcf7d4c99c4a4d","fromSide":"left","toNode":"d6fca30288512000","toSide":"top"},
		{"id":"f17197fc022ccdb9","fromNode":"1abcf7d4c99c4a4d","fromSide":"left","toNode":"f7e956975e57090d","toSide":"top"},
		{"id":"4484975e7cdad3ea","fromNode":"804f434879eec1a2","fromSide":"top","toNode":"1abcf7d4c99c4a4d","toSide":"right"}
	]
}